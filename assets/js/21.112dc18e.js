(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{230:function(v,_,e){"use strict";e.r(_);var o=e(28),c=Object(o.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"类型转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[v._v("#")]),v._v(" 类型转换")]),v._v(" "),e("p",[v._v("将数据由一种类型变换为另一种类型.")]),v._v(" "),e("p",[v._v("类型转换发生在静态类型语言的编译阶段, 而强制类型转换则发生在动态类型语言的运行时("),e("code",[v._v("runtime")]),v._v(")\n在 "),e("code",[v._v("JavaScript")]),v._v(" 中通常将它们称为强制类型转换")]),v._v(" "),e("h2",{attrs:{id:"toboolean"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toboolean"}},[v._v("#")]),v._v(" ToBoolean")]),v._v(" "),e("p",[e("code",[v._v("truthy")]),v._v(" (真值) 指的是在布尔值上下文中, 转换后的值为真的值.")]),v._v(" "),e("p",[v._v("所有的值都是真值, 除非被定义为假值("),e("code",[v._v("0")]),v._v(","),e("code",[v._v("0n")]),v._v(","),e("code",[v._v("NaN")]),v._v(","),e("code",[v._v(',""')]),v._v(","),e("code",[v._v("false")]),v._v(","),e("code",[v._v("undefined")]),v._v(","),e("code",[v._v("null")]),v._v("),")]),v._v(" "),e("h2",{attrs:{id:"toprimtive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toprimtive"}},[v._v("#")]),v._v(" ToPrimtive")]),v._v(" "),e("p",[v._v("对象在转换基本类型时, 首先调用 "),e("code",[v._v("valueOf")]),v._v("(一般会返回且其本身), 然后调用 "),e("code",[v._v("toString")]),v._v(". ("),e("strong",[v._v("可重写")]),v._v(")")]),v._v(" "),e("p",[e("code",[v._v("Symbol.toPrimitive")]),v._v(" 转换基本类型时, 优先级最高.")]),v._v(" "),e("h2",{attrs:{id:"转换类型比较运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#转换类型比较运算符"}},[v._v("#")]),v._v(" == (转换类型比较运算符 )")]),v._v(" "),e("p",[v._v("严格比较运算符(===), 仅当两个操作数的类型相同且值相等为 "),e("code",[v._v("true")])]),v._v(" "),e("p",[v._v("转换类型比较运算符 (==), 在比较之前,将两个操作数转换成相同的类型")]),v._v(" "),e("p",[v._v("关系运算符(<=), 在比较值前,先将两个操作数转换为原始值, 使其类型相同, 再进行比较运算")]),v._v(" "),e("p",[v._v("字符串比较则是使用基于标准字典的 Unicode 值来进行比较的。")]),v._v(" "),e("p",[e("code",[v._v("x == y")]),v._v(" 比较规则:")]),v._v(" "),e("ol",[e("li",[e("p",[e("code",[v._v("Type(x)")]),v._v(" 与 "),e("code",[v._v("Type(y)")]),v._v(" 相同")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'undefined'")]),v._v(", 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'null'")]),v._v(", 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'number'")]),v._v(":\n"),e("ul",[e("li",[e("code",[v._v("x")]),v._v(" 为 "),e("code",[v._v("NaN")]),v._v(", 返回 "),e("code",[v._v("false")])]),v._v(" "),e("li",[e("code",[v._v("y")]),v._v(" 为 "),e("code",[v._v("NaN")]),v._v(", 返回 "),e("code",[v._v("false")])]),v._v(" "),e("li",[e("code",[v._v("x")]),v._v(" 与 "),e("code",[v._v("y")]),v._v(" 为相等数值, 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("x")]),v._v(" 为 "),e("code",[v._v("+0")]),v._v(","),e("code",[v._v("y")]),v._v(" 为 "),e("code",[v._v("-0")]),v._v(", 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("x")]),v._v(" 为 "),e("code",[v._v("-0")]),v._v(","),e("code",[v._v("y")]),v._v(" 为 "),e("code",[v._v("+0")]),v._v(", 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[v._v("返回 "),e("code",[v._v("false")])])])]),v._v(" "),e("li",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'string'")]),v._v(", 当且仅当 "),e("code",[v._v("x")]),v._v(" 和 "),e("code",[v._v("y")]),v._v(" 为完全相同的字符串序列时, 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'boolean'")]),v._v(", 当且仅当 "),e("code",[v._v("x")]),v._v(" 和 "),e("code",[v._v("y")]),v._v(" 同为 "),e("code",[v._v("true")]),v._v("或同为 "),e("code",[v._v("false")]),v._v("时, 返回 "),e("code",[v._v("true")])]),v._v(" "),e("li",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'object'")]),v._v(", 当且仅当 "),e("code",[v._v("x")]),v._v(" 和 "),e("code",[v._v("y")]),v._v(" 为同一对象引用时, 返回 "),e("code",[v._v("true")])])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("x")]),v._v(" 为 "),e("code",[v._v("null")]),v._v(" 且 "),e("code",[v._v("y")]),v._v(" 为 "),e("code",[v._v("undefined")]),v._v(", 返回 "),e("code",[v._v("true")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("x")]),v._v(" 为 "),e("code",[v._v("undefined")]),v._v(" 且 "),e("code",[v._v("y")]),v._v(" 为 "),e("code",[v._v("null")]),v._v(", 返回 "),e("code",[v._v("true")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'number'")]),v._v(", 且 "),e("code",[v._v("Type(y)")]),v._v(" 为 "),e("code",[v._v("'string'")]),v._v(", 返回 "),e("code",[v._v("x == ToNumber(y)")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'string'")]),v._v(", 且 "),e("code",[v._v("Type(y)")]),v._v(" 为 "),e("code",[v._v("'number'")]),v._v(", 返回 "),e("code",[v._v("ToNumber(x) == y")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'boolean'")]),v._v(", 返回 "),e("code",[v._v("ToNumber(x) == y")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Type(y)")]),v._v(" 为 "),e("code",[v._v("'boolean'")]),v._v(", 返回 "),e("code",[v._v("x == ToNumber(y)")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'string'")]),v._v("|"),e("code",[v._v("number")]),v._v(", 且 "),e("code",[v._v("Type(y)")]),v._v("为 "),e("code",[v._v("'object'")]),v._v(", 返回 "),e("code",[v._v("x == ToPrimitive(y)")])])]),v._v(" "),e("li",[e("p",[e("code",[v._v("Type(x)")]),v._v(" 为 "),e("code",[v._v("'object'")]),v._v(", 且 "),e("code",[v._v("Type(y)")]),v._v("为 "),e("code",[v._v("'string'")]),v._v("|"),e("code",[v._v("number")]),v._v(", 返回 "),e("code",[v._v("ToPrimitive(x) == y")])])]),v._v(" "),e("li",[e("p",[v._v("返回 "),e("code",[v._v("false")])])])]),v._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[v._v("类型相同")]),v._v(" "),e("p",[v._v("返回 "),e("code",[v._v("x")]),v._v(" === "),e("code",[v._v("y")])])]),v._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[v._v("类型不同")]),v._v(" "),e("ol",[e("li",[v._v("类型中存在 "),e("code",[v._v("undefind")]),v._v(" 或 "),e("code",[v._v("null")]),v._v(", 当且仅当 "),e("code",[v._v("undefined")]),v._v(" 与 "),e("code",[v._v("null")]),v._v(" 相互组合, 返回 "),e("code",[v._v("true")]),v._v(", 否者返回 false")]),v._v(" "),e("li",[v._v("类型为 "),e("code",[v._v("string")]),v._v(" 与 "),e("code",[v._v("number")]),v._v(" 相互组合, 将 "),e("code",[v._v("string")]),v._v(" 类型转换为 "),e("code",[v._v("number")]),v._v(" 类型之后再比较")]),v._v(" "),e("li",[v._v("类型 "),e("code",[v._v("boolean")]),v._v(" 与其他类型组合, 将 "),e("code",[v._v("boolean")]),v._v(" 类型转换成 "),e("code",[v._v("number")]),v._v(" 类型之后再比较")]),v._v(" "),e("li",[v._v("类型 "),e("code",[v._v("object")]),v._v(" 与其他类型组合, 将 "),e("code",[v._v("object")]),v._v(" 类型转换成 "),e("code",[v._v("原始值")]),v._v(" 类型后再比较")]),v._v(" "),e("li",[v._v("返回 "),e("code",[v._v("false")])])])]),v._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[v._v("[] == ![] 比较步骤")]),v._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// `[]` => ToBoolean => `true` => 取反 => `false`")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("==")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[v._v("false")]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// `false` => ToNumber => `0`")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("]")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("==")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// `[]` => ToPrimitive => ''")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[v._v("''")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("==")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// `''` => ToNumber => 0")]),v._v("\n"),e("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[v._v("==")]),v._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[v._v("0")]),v._v("\n")])])])]),v._v(" "),e("h2",{attrs:{id:"四则运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四则运算符"}},[v._v("#")]),v._v(" 四则运算符")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("加法")]),v._v(" "),e("ul",[e("li",[v._v("存在 "),e("code",[v._v("string")]),v._v(" 类型, 另一类型也转换为 "),e("code",[v._v("string")]),v._v(" 类型, 之后进行字符串连接操作")]),v._v(" "),e("li",[v._v("不存在 "),e("code",[v._v("string")]),v._v(" 类型, 触发将值转换为原始值、转换为数字等操作")])])]),v._v(" "),e("li",[e("p",[v._v("非加法")]),v._v(" "),e("ul",[e("li",[v._v("触发将值转换为原始值、转换为数字等类型转化操作")])])])]),v._v(" "),e("h2",{attrs:{id:"number-转化规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#number-转化规则"}},[v._v("#")]),v._v(" Number 转化规则")]),v._v(" "),e("ol",[e("li",[e("code",[v._v("Boolean")]),v._v(" 类型, "),e("code",[v._v("true")]),v._v(" => "),e("code",[v._v("1")]),v._v(", "),e("code",[v._v("false")]),v._v(" => "),e("code",[v._v("2")])]),v._v(" "),e("li",[e("code",[v._v("Number")]),v._v(" 类型, 直接返回")]),v._v(" "),e("li",[e("code",[v._v("null")]),v._v(" => "),e("code",[v._v("0")])]),v._v(" "),e("li",[e("code",[v._v("undefined")]),v._v(" => "),e("code",[v._v("NaN")])]),v._v(" "),e("li",[e("code",[v._v("String")]),v._v(":\n"),e("ul",[e("li",[v._v("由纯数字连续组成的字符串, 将其转化为十进制数值(保留正负号去除前缀 "),e("code",[v._v("0")]),v._v("与"),e("code",[v._v("''")]),v._v("); "),e("code",[v._v("01")]),v._v(" => "),e("code",[v._v("1")]),v._v(", "),e("code",[v._v("01.01")]),v._v(" => "),e("code",[v._v("1.01")])]),v._v(" "),e("li",[v._v("十六进制; "),e("code",[v._v("0xf")]),v._v(" => "),e("code",[v._v("15")])]),v._v(" "),e("li",[v._v("空字符串; "),e("code",[v._v("''")]),v._v(" => 0")]),v._v(" "),e("li",[e("code",[v._v("NaN")])])])]),v._v(" "),e("li",[v._v("对象 依次 valueOf, toString 再一次按照前置规则在进行转换; "),e("code",[v._v("new Date()")]),v._v(" => "),e("code",[v._v("new Date().valueOf()")]),v._v(" 当前时刻的毫秒数")])])])}),[],!1,null,null,null);_.default=c.exports}}]);