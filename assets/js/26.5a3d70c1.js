(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{367:function(t,a,s){"use strict";s.r(a);var e=s(9),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"动态类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态类型"}},[t._v("#")]),t._v(" 动态类型")]),t._v(" "),s("h3",{attrs:{id:"javascript-是一门-弱类型-动态语言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-是一门-弱类型-动态语言"}},[t._v("#")]),t._v(" JavaScript 是一门 弱类型/动态语言;")]),t._v(" "),s("p",[t._v("不用提前声明变量的类型,在程序运行的过程中,类型会被自动确定.")]),t._v(" "),s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("p",[t._v("最新的 ECMAScript 标准定义了 8 种数据类型")]),t._v(" "),s("h3",{attrs:{id:"原始类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始类型"}},[t._v("#")]),t._v(" 原始类型")]),t._v(" "),s("ul",[s("li",[t._v("Boolean")]),t._v(" "),s("li",[t._v("Null")]),t._v(" "),s("li",[t._v("Undefined")]),t._v(" "),s("li",[t._v("Number")]),t._v(" "),s("li",[t._v("BigInt")]),t._v(" "),s("li",[t._v("String")]),t._v(" "),s("li",[t._v("Symbol")])]),t._v(" "),s("h3",{attrs:{id:"引用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),s("ul",[s("li",[t._v("Object")])]),t._v(" "),s("h2",{attrs:{id:"原始值-primitive-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原始值-primitive-values"}},[t._v("#")]),t._v(" 原始值 (Primitive values)")]),t._v(" "),s("p",[t._v("除 Object 以外的所有类型都是不可变的(值本身无法被改变), 这些类型的值被称为 "),s("code",[t._v("原始值")])]),t._v(" "),s("h3",{attrs:{id:"布尔类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型"}},[t._v("#")]),t._v(" 布尔类型")]),t._v(" "),s("p",[s("code",[t._v("true")]),t._v("、 "),s("code",[t._v("false")])]),t._v(" "),s("h3",{attrs:{id:"null-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#null-类型"}},[t._v("#")]),t._v(" Null 类型")]),t._v(" "),s("p",[s("code",[t._v("null")])]),t._v(" "),s("h3",{attrs:{id:"undefined-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#undefined-类型"}},[t._v("#")]),t._v(" Undefined 类型")]),t._v(" "),s("p",[s("code",[t._v("undefined")])]),t._v(" "),s("h3",{attrs:{id:"数字类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数字类型"}},[t._v("#")]),t._v(" 数字类型")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("基于 IEEE754 标准(浮点数算术标准)的双精度 64 位二进制格式的值(-2"),s("sup",[t._v("53")]),t._v("-1 ~ 2"),s("sup",[t._v("53")]),t._v("-1)")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("+Infinity")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("-Infinity")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("NaN")])])])]),t._v(" "),s("p",[t._v("检测是否大于 "),s("code",[t._v("+/-Infinity")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最大值")]),t._v("\nNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最小值")]),t._v("\nNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_VALUE")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES 6")]),t._v("\nNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSafeInteger")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_SAFE_INTEGER")]),t._v("\nNumber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIN_SAFE_INTEGER")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12138")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12138")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -Infinity")]),t._v("\n")])])]),s("h3",{attrs:{id:"bigint-类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bigint-类型"}},[t._v("#")]),t._v(" BigInt 类型")]),t._v(" "),s("p",[t._v("用任意精度表示整数. 使用 BigInt 可以安全的存储和操作大整数.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = 9007199254740992n")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2n")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("53n")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// c = 9007199254753130n")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("BigInt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12138")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bigint")]),t._v("\n")])])]),s("p",[s("strong",[t._v("BigInt 类型不能与数字互相操作, 否则将会抛出 TypeError.")])]),t._v(" "),s("p",[s("strong",[t._v("BigInt 类型转换成为 Boolean 时, 行为类似于一个数字.")])]),t._v(" "),s("h3",{attrs:{id:"字符串类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型"}},[t._v("#")]),t._v(" 字符串类型")]),t._v(" "),s("p",[t._v("用于表示文本数据.")]),t._v(" "),s("h3",{attrs:{id:"符号类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#符号类型"}},[t._v("#")]),t._v(" 符号类型")]),t._v(" "),s("p",[t._v("符号 (Symbols) 是 ECMAScript 第六版新定义的,符号类型是唯一的并且是不可修改的.")]),t._v(" "),s("h2",{attrs:{id:"对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),s("h3",{attrs:{id:"什么是对象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象"}},[t._v("#")]),t._v(" 什么是对象?")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("计算机科学中, 对象是指内存中可以被标识符引用的一块区域.")])]),t._v(" "),s("li",[s("p",[t._v("JavaScript 中, 对象可以看做是一组属性的集合.")])])]),t._v(" "),s("ul",[s("li",[t._v("Object")]),t._v(" "),s("li",[t._v("Array")]),t._v(" "),s("li",[t._v("RegExp")]),t._v(" "),s("li",[t._v("Date")]),t._v(" "),s("li",[t._v("Math")]),t._v(" "),s("li",[t._v("Function")])]),t._v(" "),s("h3",{attrs:{id:"属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性"}},[t._v("#")]),t._v(" 属性")]),t._v(" "),s("ul",[s("li",[t._v("ECMAScript 定义的对象中有两种属性：数据属性和访问器属性。")])]),t._v(" "),s("h4",{attrs:{id:"数据属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据属性"}},[t._v("#")]),t._v(" 数据属性")]),t._v(" "),s("p",[t._v("键值对, 且每个数据属性拥有以下特性:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("[[value]]")]),t._v(" 属性的数据值")]),t._v(" "),s("li",[s("code",[t._v("[[writable]]")]),t._v(" 属性的值是否可以改变")]),t._v(" "),s("li",[s("code",[t._v("[[enumerable]]")]),t._v(" 属性是否可以用 for...in 循环进行枚举")]),t._v(" "),s("li",[s("code",[t._v("[[configurable]]")]),t._v(" 该属性是否可以删除, 是否可以更改 "),s("code",[t._v("value")]),t._v("、"),s("code",[t._v("writable")]),t._v(" 以外的特性")])]),t._v(" "),s("h4",{attrs:{id:"访问器属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#访问器属性"}},[t._v("#")]),t._v(" 访问器属性")]),t._v(" "),s("p",[t._v("访问器属性有一个或两个访问器函数 (get 和 set) 来存取数值，并且有以下特性:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("[[get]]")]),t._v(" 一个没有参数的函数，"),s("strong",[t._v("在读取属性时工作")])]),t._v(" "),s("li",[s("code",[t._v("[[set]]")]),t._v(" 带有一个参数的函数，"),s("strong",[t._v("当属性被设置时调用")])]),t._v(" "),s("li",[s("code",[t._v("[[enumerable]]")]),t._v(" 属性是否可以用 for...in 循环进行枚举")]),t._v(" "),s("li",[s("code",[t._v("[[configurable]]")]),t._v(" 该属性是否可以删除, 是否可以转变成一个数据属性")])]),t._v(" "),s("p",[t._v("注意：这些特性只有 JavaScript 引擎才用到，因此不能直接访问它们。所以特性被放在两对方括号中，而不是一对。")])])}),[],!1,null,null,null);a.default=r.exports}}]);